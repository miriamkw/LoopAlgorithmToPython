name: CI Workflow

# Trigger the workflow on push and pull request events (limited to the main branch)
on:
  push:
  pull_request:

# Define the jobs to run in the workflow
jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Specify your required Python version

      # macOS-specific steps (Swift setup and dylib generation)
      - name: Set up Swift (only on macOS)
        if: matrix.os == 'macos-latest'
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -runFirstLaunch

      # Install Swift on Windows
      - name: Install Swift on Windows
        if: matrix.os == 'windows-latest'
        run: |
          Invoke-WebRequest -Uri https://github.com/apple/swift/releases/download/5.5.3/Swift-5.5.3-Windows10.exe -OutFile swift-installer.exe
          Start-Process -FilePath .\swift-installer.exe -ArgumentList '/S' -NoNewWindow -Wait
          Remove-Item swift-installer.exe

      - name: Install dependencies
        shell: bash  # Force bash shell on all platforms, including Windows
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Pull latest changes from remote
        run: |
          git pull origin ${{ github.ref }} --rebase

      - name: Run build script Mac and Linux
        shell: bash  # Force bash shell on all platforms, including Windows
        run: |
          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            chmod +x build.sh
            ./build.sh
          elif [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            chmod +x build.sh
            ./build.sh
          fi

      - name: Run build script Windows
        if: matrix.os == 'windows-latest'
        run: |
          echo "Running Windows build process..."
          pwsh ./build.ps1 

      # Conditionally push generated libraries based on the OS
      - name: Commit and push the generated library (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          git add ./loop_to_python_api/libLoopAlgorithmToPython.dylib
          git commit -m "Add generated libLoopAlgorithmToPython.dylib"
          git push origin HEAD:${{ github.ref }}

      - name: Commit and push the generated library (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          git add ./loop_to_python_api/LoopAlgorithmToPython.dll
          git commit -m "Add generated LoopAlgorithmToPython.dll"
          git push origin HEAD:${{ github.ref }}

      - name: Commit and push the generated library (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"
          git add ./loop_to_python_api/libLoopAlgorithmToPython.so
          git commit -m "Add generated libLoopAlgorithmToPython.so"
          git push origin HEAD:${{ github.ref }}
